-#  Copyright (c) 2025, German Contingent for the Worldscoutjamboree 2027. This file is part of
-#  hitobito_wsjrdp_2027 and licensed under the Affero General Public License version 3
-#  or later. See the COPYING file at the top-level directory or at
-#  https://github.com/hitobito/hitobito_wsjrdp_2027.

- title(t('groups.map.title'))

%link{rel: "stylesheet", href: "https://unpkg.com/leaflet@1.9.4/dist/leaflet.css", integrity: "sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=", crossorigin: ""}
%script{src: "https://unpkg.com/leaflet@1.9.4/dist/leaflet.js", integrity: "sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=", crossorigin: ""}

:css
  .color-box {
    width: 1rem; 
    height: 1rem;
    display: inline-block;
    border-radius: 0.25rem;
  }

.container.my-4
  .row
    .col-12
      #map{style: "height: 80vh; width: 100%;"}

  .row.mt-3
  .col-12
    %h2
      =t('groups.map.filters.title')

    .card.my-2.p-2
      %h3
        %input.form-check-input{type: "checkbox", id: "allRoles", checked: true}
        %label.form-check-label{for: "allRoles"}
          =t('groups.map.filters.roles.title')
      %div.ml-3
        .form-check.form-check-inline
          %input.form-check-input.role-filter-checkbox{type: "checkbox", value: "Youth Participant", id: "roleYP", checked: true}
          %label.form-check-label{for: "roleYP"}
            =t('groups.map.filters.roles.yp')
        .form-check.form-check-inline
          %input.form-check-input.role-filter-checkbox{type: "checkbox", value: "Unit Leader", id: "roleUL", checked: true}
          %label.form-check-label{for: "roleUL"}
            =t('groups.map.filters.roles.ul')
        .form-check.form-check-inline
          %input.form-check-input.role-filter-checkbox{type: "checkbox", value: "IST", id: "roleIST", checked: true}
          %label.form-check-label{for: "roleIST"}
            =t('groups.map.filters.roles.ist')
        .form-check.form-check-inline
          %input.form-check-input.role-filter-checkbox{type: "checkbox", value: "CMT", id: "roleCMT", checked: true}
          %label.form-check-label{for: "roleCMT"}
            =t('groups.map.filters.roles.cmt')
    .card.my-2.p-2
      %h3
        %input.form-check-input{type: "checkbox", id: "allRegions", checked: true}
        %label.form-check-label{for: "allRegions"}
          =t('groups.map.filters.regions.title')
      %div.ml-3
        - @associations_and_regions.each do |association, regions|
          %h6.mt-2
            %input.form-check-input.association-filter-checkbox{type: "checkbox", id: association.parameterize, checked: true}
            %label.form-check-label{for: association}
              = association
          %div.ml-3
            - regions.each do |region|
              .form-check.form-check-inline
                %input.form-check-input.region-filter-checkbox{type: "checkbox", value: "#{association}_#{region}", id: "#{association.parameterize}_#{region.parameterize}", checked: true, class: "#{association.parameterize}-filter-checkbox"}
                %label.form-check-label{for: "#{association.parameterize}_#{region.parameterize}"}= region
    .card.my-2.p-2
      %h3
        %input.form-check-input{type: "checkbox", id: "allUnitCodes", checked: true}
        %label.form-check-label{for: "allUnitCodes"}
          =t('groups.map.filters.unit-codes.title')
      %div.ml-3
        - @unit_codes.each do |unit_code|
          .form-check.form-check-inline
            %input.form-check-input.unit-code-filter-checkbox{type: "checkbox", value: unit_code, id: unit_code, checked: true}
            %label.form-check-label{for: unit_code}
              %div.color-box{ :style => "background-color: #{unit_code};" }
              = unit_code
        %input.form-check-input.unit-code-filter-checkbox{type: "checkbox", value: "null", id: "unit_code_null", checked: true}
        %label.form-check-label{for: "unit_code_null"}
          =t('groups.map.filters.unit-codes.none')

= yield

:javascript
  (function() {
    function initMap() {
      if ($('#map').length === 0) return;

      var container = L.DomUtil.get('map');
      if (container != null) {
        container._leaflet_id = null;
      }

      var map = L.map('map').setView([50.9747134, 10.3193565], 6);
      L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 13,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
      }).addTo(map);

      var people = #{raw(@people.to_json(except: [:tag_list]))};
      var allMarkers = [];

      people.forEach((m, i) => {
        var markerType;
        switch (m.role) {
          case 'Youth Participant':
            markerType = "custom-map-marker-yp";
            break;
          case 'Unit Leader':
            markerType = "custom-map-marker-ul";
            break;
          case 'IST':
            markerType = "custom-map-marker-ist";
            break;
          case 'CMT':
            markerType = "custom-map-marker-cmt";
            break;
          default:
            markerType = "custom-map-marker";
        }

        const icon = L.divIcon({
          className: markerType,
          iconSize: [32, 48],
          iconAnchor: [16, 48],
          popupAnchor: [0, -48],
          html: '<div style="--marker-color: ' + (m.unit_code == null ? '#666666' : m.unit_code) + '" class="marker-pin"><div class="icon"></div></div>'
        });

        var location = [m.latitude, m.longitude];
        var marker = L.marker(location, { icon: icon });
        marker.bindPopup(`
          <a href="/groups/${m.primary_group_id}/people/${m.id}" target="_blank"><b>${m.first_name} ${m.last_name}</a></b><br />
          ${m.role}<br />
          ${m.rdp_association} ${m.rdp_association_region} <br />
          ${m.rdp_association_sub_region} <br />
          ${m.rdp_association_group}
        `);

        allMarkers.push({
          role: m.role,
          marker: marker,
          region: m.rdp_association_region,
          association: m.rdp_association,
          unit_code: m.unit_code
        });
      });

      function updateMapMarkers() {
        var selectedRoles = $('.role-filter-checkbox:checked').map(function() {
          return $(this).val();
        }).get();

        var selectedRegions = $('.region-filter-checkbox:checked').map(function() {
          return $(this).val();
        }).get();

        var selectedUnitCodes = $('.unit-code-filter-checkbox:checked').map(function() {
          return $(this).val();
        }).get();

        allMarkers.forEach(function(markerData) {
          const roleIsSelected = selectedRoles.includes(markerData.role);
          const regionIsSelected = selectedRegions.includes(`${markerData.association}_${markerData.region}`);
          let unitCodeIsSelected = markerData.unit_code === null ? selectedUnitCodes.includes("null") : selectedUnitCodes.includes(markerData.unit_code);

          if (roleIsSelected && regionIsSelected && unitCodeIsSelected) {
            markerData.marker.addTo(map);
          } else {
            markerData.marker.removeFrom(map);
          }
        });
      }

      $('.role-filter-checkbox').on('change', updateMapMarkers);
      $('.region-filter-checkbox').on('change', updateMapMarkers);
      $('.unit-code-filter-checkbox').on('change', updateMapMarkers);

      $('#allRoles').on('change', function() {
        var isChecked = $(this).is(':checked');
        $('.role-filter-checkbox').prop('checked', isChecked);
        updateMapMarkers();
      });
      
      $('#allRegions').on('change', function() {
        var isChecked = $(this).is(':checked');
        $('.region-filter-checkbox').prop('checked', isChecked);
        updateMapMarkers();
      });

      $('#allUnitCodes').on('change', function() {
        var isChecked = $(this).is(':checked');
        $('.unit-code-filter-checkbox').prop('checked', isChecked);
        updateMapMarkers();
      });

      $('.association-filter-checkbox').on('change', function() {
        var association = $(this).attr('id');
        var isChecked = $(this).is(':checked');
        $(`.${association}-filter-checkbox`).prop('checked', isChecked);
        updateMapMarkers();
      });

      updateMapMarkers();
    }

    function ensureLeaflet(cb) {
      if (typeof L !== 'undefined') { cb(); return; }
      var s = document.createElement('script');
      s.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
      s.integrity = 'sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=';
      s.crossOrigin = '';
      s.onload = cb;
      document.head.appendChild(s);
    }

    $(document).on('turbo:load', function() { ensureLeaflet(initMap); });
  })();
